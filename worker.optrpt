Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/opt/intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -c -qopt-report=5 -axMIC-AVX512 -qopenmp -o worker.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: simulate(float, long, int, float *, float *, int, int, long)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (simulate(float, long, int, float *, float *, int, int, long)) [1/1=100.0%] worker.cc(10,180)
  -> EXTERN: (15,29) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (35,25) L(float, float, float)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at worker.cc(33,1)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.cc(33,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(36,7) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,22) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,33) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(37,35) ]
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(38,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.077
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at worker.cc(33,1)
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(36,7) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,22) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,33) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(37,35) ]
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(38,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.060
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 131 
   remark #15477: vector cost: 26.930 
   remark #15478: estimated potential speedup: 4.320 
   remark #15484: vector function calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: L(float, float, float) with simdlen=16, actual parameter types: (uniform,uniform,vector)   [ worker.cc(35,25) ]
   remark #15492: A suitable vector variant was found (out of 2) with xmm, simdlen=4, unmasked, formal parameter types: (vector,vector,vector)
   remark #15350: The function ISA does not match the compilation target. For better SIMD performance, consider using -vecabi=cmdtarget compiler switch or "processor" clause in vector function declaration
   remark #15493: --- end vector function matching report ---
LOOP END

LOOP BEGIN at worker.cc(33,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(36,7) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,22) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,33) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(37,35) ]
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(38,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.077
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END


Non-optimizable loops:


LOOP BEGIN at worker.cc(23,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

worker.cc(10,180):remark #34051: REGISTER ALLOCATION : [_Z8simulatefliPfS_iil] worker.cc:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r9 r12 zmm0]
        
    Routine temporaries
        Total         :      38
            Global    :      14
            Local     :      24
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: simulate(float, long, int, float *, float *, int, int, long) [knl]

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (simulate(float, long, int, float *, float *, int, int, long)) [1/1=100.0%] worker.cc(10,180)
  -> EXTERN: (15,29) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (35,25) L(float, float, float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.cc(33,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(36,7) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,22) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,33) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(37,35) ]
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(38,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.077
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at worker.cc(33,1)
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(36,7) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,22) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,33) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(37,35) ]
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(38,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.060
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 131 
   remark #15477: vector cost: 26.930 
   remark #15478: estimated potential speedup: 4.320 
   remark #15484: vector function calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: L(float, float, float) with simdlen=16, actual parameter types: (uniform,uniform,vector)   [ worker.cc(35,25) ]
   remark #15492: A suitable vector variant was found (out of 2) with xmm, simdlen=4, unmasked, formal parameter types: (vector,vector,vector)
   remark #15350: The function ISA does not match the compilation target. For better SIMD performance, consider using -vecabi=cmdtarget compiler switch or "processor" clause in vector function declaration
   remark #15493: --- end vector function matching report ---
LOOP END

LOOP BEGIN at worker.cc(33,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(36,7) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,22) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,33) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(37,35) ]
   remark #15389: vectorization support: reference d_t1 has unaligned access   [ worker.cc(38,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.077
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END


Non-optimizable loops:


LOOP BEGIN at worker.cc(23,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

worker.cc(36,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
worker.cc(36,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
worker.cc(36,22):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V512, F32-V512, F32-V512 }, number of elements { 16 }, select mask { 0x000000007 }.
worker.cc(10,180):remark #34051: REGISTER ALLOCATION : [_Z8simulatefliPfS_iil.Z] worker.cc:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   52[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k0-k5]
        
    Routine temporaries
        Total         :     705
            Global    :     165
            Local     :     540
        Regenerable   :      62
        Spilled       :      88
        
    Routine stack
        Variables     :      76 bytes*
            Reads     :       7 [1.01e+01 ~ 0.1%]
            Writes    :      14 [1.16e+02 ~ 0.6%]
        Spills        :    3008 bytes*
            Reads     :     135 [2.63e+03 ~ 14.5%]
            Writes    :     122 [9.83e+02 ~ 5.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: simulate(float, long, int, float *, float *, int, int, long) [generic]

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (simulate(float, long, int, float *, float *, int, int, long)) [1/1=100.0%] worker.cc(10,180)
  -> EXTERN: (15,29) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (35,25) L(float, float, float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.cc(33,1)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at worker.cc(33,1)
   remark #15388: vectorization support: reference d_t1 has aligned access   [ worker.cc(36,7) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,22) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(36,33) ]
   remark #15389: vectorization support: reference d_t has unaligned access   [ worker.cc(37,35) ]
   remark #15388: vectorization support: reference d_t1 has aligned access   [ worker.cc(38,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15410: vectorization support: conversion from int to float will be emulated   [ worker.cc(35,39) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.171
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 131 
   remark #15477: vector cost: 46.750 
   remark #15478: estimated potential speedup: 2.730 
   remark #15484: vector function calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: L(float, float, float) with simdlen=4, actual parameter types: (uniform,uniform,vector)   [ worker.cc(35,25) ]
   remark #15492: A suitable vector variant was found (out of 2) with xmm, simdlen=4, unmasked, formal parameter types: (vector,vector,vector)
   remark #15493: --- end vector function matching report ---
LOOP END

LOOP BEGIN at worker.cc(33,1)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at worker.cc(23,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

worker.cc(36,22):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
worker.cc(10,180):remark #34051: REGISTER ALLOCATION : [_Z8simulatefliPfS_iil.A] worker.cc:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     235
            Global    :      66
            Local     :     169
        Regenerable   :      54
        Spilled       :      10
        
    Routine stack
        Variables     :      76 bytes*
            Reads     :       7 [1.01e+01 ~ 0.3%]
            Writes    :      14 [1.16e+02 ~ 3.3%]
        Spills        :     120 bytes*
            Reads     :      31 [2.19e+02 ~ 6.2%]
            Writes    :      25 [9.55e+01 ~ 2.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
